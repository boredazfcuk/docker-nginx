server {

   server_name   _;
   listen        443 ssl http2;
   root          /var/www/html;
   error_page    400 403 404 500 502 503 504 @blackhole;
   location      @blackhole { return 444; }
   access_log    /var/log/nginx/access.log main if=$ignore_ips;

   ##### Load TLS Certificates coniguration #####
   include   tls.conf;
   include   certificates.conf;

   ##### Enable large cookie headers #####
   large_client_header_buffers   4 16k;
   client_max_body_size          16M;

   ##### Block unwanted clients #####
   set $block_client yes;
   if ($allowed_network = yes)   { set $block_client no; }
   if ($allowed_country = yes)   { set $block_client no; }
   if ($http_referer = "https://securityheaders.com/") {
      set $block_client no;
   }
   if ($http_user_agent ~* ".*Let's Encrypt validation server; \+https:\/\/www\.letsencrypt\.org\.*") {
      set $block_client no;
   }
   if ($block_client = yes)       { return 444; }

   ##### Tell robots to do one #####
   location = /robots.txt {
      access_log      off;
      log_not_found   off;
      add_header      Content-Type text/plain;
      return          200 "User-agent: *\nDisallow: /\n";
   }

   ##### Ignore all requests for favicon.ico at the root of the server #####
   location = /favicon.ico {
      access_log      off;
      log_not_found   off;
      return          444;
   }

   ##### Deny all attempts to .htaccess, users.htpasswd and .DS_Store #####
   location ~* \.(?:htaccess|htpasswd|DS_Store) {
      access_log      off;
      log_not_found   off;
      return          444;
   }

   ##### Locations #####
   # SABnzbd
   location /sabnzbd {
      return 302 https://$host/sabnzbd/;
   }
   location ~* ^/sabnzbd/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $sabnzbd_upstream   http://sabnzbd:9190;
      proxy_pass   $sabnzbd_upstream;
   }
   location ~* ^/sabnzbd/(?:history|queue)/ {
      access_log      off;
      log_not_found   off;
      include         reverse_proxy.conf;
      include         security_headers_https.conf;
      set             $sabnzbd_upstream   http://sabnzbd:9190;
      proxy_pass      $sabnzbd_upstream;
   }
   location /sabnzbd/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $sabnzbd_upstream   http://sabnzbd:9190;
      proxy_pass   $sabnzbd_upstream;
   }

   # Transmission
   location /transmission {
      return 302 https://$host/transmission/;
   }
   location ~* ^/transmission/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log         off;
      include            reverse_proxy.conf;
      include            security_headers_https.conf;
      set                $transmission_upstream   http://transmission:9091;
      proxy_pass         $transmission_upstream;
   }
   location /transmission/ {
      include            reverse_proxy.conf;
      include            security_headers_https.conf;
      set                $transmission_upstream   http://transmission:9091;
      proxy_pass         $transmission_upstream;
   }
   # location /transmission/rpc {
   #    include            reverse_proxy.conf;
   #    include            security_headers_https.conf;
   #    set                $transmission_upstream   http://transmission:9091;
   #    proxy_pass         $transmission_upstream;
   # }
   # location /transmission/web/ {
   #    include            reverse_proxy.conf;
   #    include            security_headers_https.conf;
   #    set                $transmission_upstream   http://transmission:9091;
   #    proxy_pass         $transmission_upstream;
   # }
   # location /transmission/upload {
   #    include            reverse_proxy.conf;
   #    include            security_headers_https.conf;
   #    set                $transmission_upstream   http://transmission:9091;
   #    proxy_pass         $transmission_upstream;
   # }
   location /transmission/web/style/ {
      alias /usr/share/transmission/web/style/;
   }
   location /transmission/web/javascript/ {
      alias /usr/share/transmission/web/javascript/;
   }
   location /transmission/web/images/ {
      alias /usr/share/transmission/web/images/;
   }

   # Subsonic
   location /subsonic {
      return 302 https://$host/subsonic/;
   }
   location ~* ^/subsonic/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $subsonic_upstream   http://subsonic:3030;
      proxy_pass   $subsonic_upstream;
   }
   location /subsonic/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $subsonic_upstream   http://subsonic:3030;
      proxy_pass   $subsonic_upstream;
   }

   # Jellyfin
   location /jellyfin {
      return 302 https://$host/jellyfin/;
   }
   location ~* ^/jellyfin/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      add_header   Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";
      set          $jellyfin_upstream    http://jellyfin:8096;
      proxy_pass   $jellyfin_upstream;
   }
   location /jellyfin/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      add_header   Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";
      set          $jellyfin_upstream    http://jellyfin:8096;
      proxy_pass   $jellyfin_upstream;
   }

   # Lidarr
   location /lidarr {
      return 302 https://$host/lidarr/;
   }
   location ~* ^/lidarr/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $lidarr_upstream   http://lidarr:8686;
      proxy_pass   $lidarr_upstream;
   }
   location /lidarr/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $lidarr_upstream   http://lidarr:8686;
      proxy_pass   $lidarr_upstream;
   }

   # Radarr
   location /radarr {
      return 302 https://$host/radarr/;
   }
   location ~* ^/radarr/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $radarr_upstream   http://radarr:7878;
      proxy_pass   $radarr_upstream;
   }
   location /radarr/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $radarr_upstream   http://radarr:7878;
      proxy_pass   $radarr_upstream;
   }

   # Sonarr
   location /sonarr {
      return 302 https://$host/sonarr/;
   }
   location ~* ^/sonarr/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv|flac)$ {
      access_log   off;
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $sonarr_upstream   http://sonarr:8989;
      proxy_pass   $sonarr_upstream;
   }
   location /sonarr/ {
      include      reverse_proxy.conf;
      include      security_headers_https.conf;
      set          $sonarr_upstream   http://sonarr:8989;
      proxy_pass   $sonarr_upstream;
   }

   ##### Return OK for requests to root (required for Qualys SSL test) #####
   location = / {
      include      security_headers_https.conf;
      add_header   Content-Type text/plain;
      return       200 " ";
   }

   ##### Ignore requests for anything else #####
   location / { return 444; }

}
