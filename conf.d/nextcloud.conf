server {

   server_name cae54r.uk;
   listen        443 ssl http2;
   root          /var/www/html;
#   error_page    301 400 403 404 500 502 503 504 =444 /444.html;
   access_log    /var/log/nginx/access.log main if=$ignore_ips;

   ##### Load TLS Certificates coniguration #####
   include   tls.conf;
   include   nextcloud_certificates.conf;

   ##### Set Security Headers #####
   # Do not use the security_headers_https.conf files, as these headers are
   # already set by the apache web server that is being proxied. Setting them
   # twice will result in configuration errors
   add_header   Feature-Policy                      "layout-animations 'none'; oversized-images 'none'; sync-script 'none'; sync-xhr 'none'; unsized-media 'none';";
   add_header   Referrer-Policy                     no-referrer   always;
   add_header   X-XSS-Protection                    "1; mode=block"   always;
   add_header   X-Download-Options                  noopen;
   #### Configure HSTS (DO NOT preload, unless you understand exactly how that will affect your site) #####
   add_header   Strict-Transport-Security           "max-age=63072000; includeSubdomains" always;

   ##### Block unwanted clients #####
   set $block_client yes;
   if ($allowed_network = yes)   { set $block_client no; }
   if ($allowed_country = yes)   { set $block_client no; }
   if ($http_referer = "https://securityheaders.com/") {
      set $block_client no;
   }
   if ($http_user_agent ~* ".*Let's Encrypt validation server; \+https:\/\/www\.letsencrypt\.org\.*") {
      set $block_client no;
   }
   if ($block_client = yes)       { return 444; }

   ##### Enable large cookie headers #####
   large_client_header_buffers   4 16k;
   client_max_body_size          10G;
   client_body_buffer_size       512k;
   client_body_timeout           300s;

   ##### Tell robots to do one #####
   location = /robots.txt {
      access_log      off;
      log_not_found   off;
      add_header      Content-Type text/plain;
      return          200 "User-agent: *\nDisallow: /\n";
   }

   ##### Ignore all requests for favicon.ico at the root of the server #####
   location = /favicon.ico {
      access_log      off;
      log_not_found   off;
      return          444;
   }

   ##### Deny all attempts to .htaccess, users.htpasswd and .DS_Store #####
   location ~* \.(?:htaccess|htpasswd|DS_Store) {
      access_log      off;
      log_not_found   off;
      return          444;
   }

   # Nextcloud
   location = /.well-known/carddav { return 301 https://$host:$server_port/nextcloud/remote.php/dav; }
   location = /.well-known/caldav { return 301 https://$host:$server_port/nextcloud/remote.php/dav; }
   location = /.well-known/webfinger { return 301 https://$host:$server_port/nextcloud/index.php$uri; }
   location = /.well-known/nodeinfo { return 301 https://$host:$server_port/nextcloud/index.php$uri; }

   location ^~ /nextcloud {

      # Rule borrowed from `.htaccess` to handle Microsoft DAV clients
      location = /nextcloud {
         if ( $http_user_agent ~ ^DavClnt ) {
            return 302 /nextcloud/remote.php/webdav/$is_args$args;
         }
         return 302 https://$host/nextcloud/;
      }

      # Rules borrowed from `.htaccess` to hide certain paths from clients
      location ~* ^\/nextcloud\/(?:build|tests|config|lib|3rdparty|templates|data)\/ { return 444; }
      location ~* ^\/nextcloud\/(?:\.|autotest|occ|issue|indie|db_|console) { return 444; }

      location ~* ^\/nextcloud\/(?:index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+)\.php(?:\/|$) {
         set                       $nextcloud_upstream http://nextcloud;
         proxy_pass                $nextcloud_upstream;
      }
      location ~* ^\/nextcloud\/(?:updater|oc[ms]-provider)(?:$|\/) {
         set                       $nextcloud_upstream http://nextcloud;
         proxy_pass                $nextcloud_upstream;
      }
      location ~* ^\/nextcloud\/.+[^\/]\.(?:css|js|woff2|woff2\?.+|svg|gif|map|png|html|ttf|ico|ico\?.+|jpe?g|mp3|mp4|mpe?g|mkv)$ {
         access_log                off;
         set                       $nextcloud_upstream http://nextcloud;
         proxy_pass                $nextcloud_upstream;
      }
      location /nextcloud/ {
         set                       $nextcloud_upstream http://nextcloud;
         proxy_pass                $nextcloud_upstream;
      }
      # Rule borrowed from `.htaccess`
      location /nextcloud/remote {
          return 301 /nextcloud/remote.php$request_uri;
      }

   }

   ##### Return OK for requests to root (required for Qualys SSL test) #####
   location = / {
      add_header   Content-Type text/plain;
      return       200 " ";
   }

   location = /444.html {
      return 444;
   }

   ##### Ignore requests for anything else #####
   location / { return 444; }

}